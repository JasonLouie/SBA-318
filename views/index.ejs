<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Web Chat API Docs</title>
        <link rel="stylesheet" href="/styles/styles.css" />
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script type="module" src="/scripts/script.js"></script>
    </head>
    <body class="dark-mode">
        <header>
            <nav>
                <h1>Web Chat API</h1>
                <a href="#" class="nav-element">Users Endpoint</a>
                <a href="#" class="nav-element">Chats Endpoint</a>
                <a href="#" class="nav-element">Messages Endpoint</a>
            </nav>
        </header>
        <main class="container flex-wrap">
            <section id="about-api">
                <h1>About the API</h1>
                <p>
                    This WebChatAPI was created to handle text chats between two
                    or more users and uses Node.js, Express, and EJS (to render
                    a view). At the moment, it is not connected to any databases
                    and uses static data. Any information created, updated, or
                    deleted will only take effect during the current instance
                    that the API is being ran (data does not persist). The
                    primary endpoint is the users endpoint and anything
                    implemented in this specific endpoint is expected to be
                    available for all users with an account. The chats and
                    messages endpoints are not meant for all users to access
                    (mainly administrators). For the scope of this project, some
                    methods are implemented and enabled. Below is a table
                    explaining the classes in this project and a code snippet
                    with comments for static data.
                </p>

                <h2>Classes</h2>
                <table id="classes">
                    <tr>
                        <th><h3>Class</h3></th>
                        <th><h3>Fields</h3></th>
                        <th><h3>JSON Structure</h3></th>
                        <th><h3>Description</h3></th>
                    </tr>
                    <tr>
                        <td>EndpointError.js</td>
                        <td>
                            status (private, number), message (private, string)
                        </td>
                        <td>
                            <pre><code>{
    status: this.status,
    message: this.message
}</code></pre>
                        </td>
                        <td>
                            Represents an endpoint error and used for custom
                            error handling.
                        </td>
                    </tr>
                    <tr>
                        <td>User.js</td>
                        <td>
                            id (private, number), username (private, string),
                            email (public, string), password (public, string)
                        </td>
                        <td>
                            <pre><code>{
    id: this.#id,
    username: this.#username,
    email: this.email,
    password: this.password
}</code></pre>
                        </td>
                        <td>
                            Represents a user and stores information on a user.
                            Ideally, none of the properties should be private,
                            but for the scope of the project it makes sense
                            (must be public for patch requests).
                        </td>
                    </tr>
                    <tr>
                        <td>Chat.js</td>
                        <td>
                            id (private, number), name (public, string), users
                            (private, array of userIds), image_url (private,
                            string), timestamp (private, Date object)
                        </td>
                        <td>
                            <pre><code>{
    id: this.#id,
    name: this.name,
    image_url: this.#image_url,
    preview: this.preview,
    users: this.#users,
    dateCreated: this.dateCreated,
    timeCreated: this.timeCreated
}</code></pre>
                        </td>
                        <td>
                            Represents a chat and stores information related to
                            a chat. Ideally, none of the properties should be
                            private, but for the scope of the project it makes
                            sense (must be public for patch requests).
                        </td>
                    </tr>
                    <tr>
                        <td>Message.js</td>
                        <td>
                            id (private, number), senderId (private, number), chatId (private, number), message (public, string), timestamp (private, Date object)
                        </td>
                        <td>
                            <pre><code>{
    id: this.#id,
    senderId: this.#senderId,
    chatId: this.#chatId,
    message: this.message,
    dateSent: this.dateSent,
    timeSent: this.timeSent
}</code></pre>
                        </td>
                        <td>
                            Represents a message and stores information related
                            to a message. Ideally, none of the properties should
                            be private, but for the scope of the project it
                            makes sense (must be public for patch requests).
                        </td>
                    </tr>
                </table>

                <h2>Static Dataset</h2>
                <pre><code>// Init user data
const user1 = new User("Bobert", "bobby@gmail.com", "Securepass123", 1);
const user2 = new User("SomeUser", "someEmail@gmail.com", "Securepass123", 2);
const user3 = new User("AnotherUser", "anotherEmail@domain.com", "Securepass123", 3);
const user4 = new User("testUser", "testEmail@test.com", "Securepass123", 4);
const user5 = new User("LonelyUser", "lonely@sad.com", "Securepass123", 5);

const users = [user1, user2, user3, user4, user5];

// Init chat data
const chat1 = new Chat(null, [user1, user2], 1);
const chat2 = new Chat(null, [user2, user3], 2);
const chat3 = new Chat(null, [user3, user4], 3);
const chat4 = new Chat(null, [user1, user2, user3, user4], 4);

const chats = [chat1, chat2, chat3, chat4];

// Init chat messages

// Chat 1
const message1 = new Message(1, 1, "Hello there", 1);
const message2 = new Message(2, 1, "Howdy", 2);
const message3 = new Message(1, 1, "Nice to meet you", 3);

// Chat 2
const message4 = new Message(2, 2, "This is a test", 5);
const message5 = new Message(2, 2, "test again", 6);

const messages = [message1, message2, message3, message4, message5];</code></pre>
            </section>
            <section id="users-endpoint">
                <h1>Users Endpoint</h1>
                <p>This section contains information on the /users endpoint.</p>
                <h2>Table of Endpoints</h2>
                <table id="users">
                    <tr>
                        <th><h3>Method</h3></th>
                        <th><h3>Endpoint</h3></th>
                        <th><h3>Description</h3></th>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users</td>
                        <td>Retrieves all users.</td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users?userId={id}</td>
                        <td>
                            Retrieves a particular user with userId of id using
                            a query.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users/:id</td>
                        <td>Retrieves a particular user with userId of id.</td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users/:id/chats</td>
                        <td>
                            Retrieves all chats that the user with userId of id
                            is in.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users/:id/chats/:chatId</td>
                        <td>
                            Retrieves information on the specific chat if the
                            user is in it.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users/:id/chats/:chatId/messages</td>
                        <td>
                            Retrieves all messages of a particular chat that the
                            user is in.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/:id/chats/:chatId/messages?limit={num}</td>
                        <td>
                            Retrieves the {num} most recent messages of the
                            chat.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/:id/chats/:chatId/messages?userId={id}</td>
                        <td>
                            Retrieves all messages belonging to the userId of
                            {id} if the user requesting the messages and the
                            requested user are both in that chat.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/:id/chats/:chatId/messages/:messageId</td>
                        <td>
                            Retrieves a particular message from a particular
                            chat if the user requesting the message is in the
                            chat.
                        </td>
                    </tr>
                    <tr>
                        <td>/GET</td>
                        <td>/users/:id/messages</td>
                        <td>
                            Retrieves all messages that the user with userId of
                            id sent.
                        </td>
                    </tr>
                    <tr>
                        <td>/POST</td>
                        <td>/users</td>
                        <td>
                            Creates a new user and adds it to the static array
                            of Users if the username and email are unique. There
                            are other constraints for the username, email, and
                            password field that are expected to be handled in
                            the front-end. The form HERE is an example that
                            properly handles this behavior.
                        </td>
                    </tr>
                    <tr>
                        <td>/PATCH</td>
                        <td>/users/:id</td>
                        <td>
                            Modifies an existing user's password and/or email.
                            Restrictions are placed to prevent users from
                            changing their username or id.
                        </td>
                    </tr>
                    <tr>
                        <td>/PATCH</td>
                        <td>/users/:id/chats/:chatId</td>
                        <td>
                            Modifies an existing chat's name, image_url, or
                            invites new user(s) to the chat. Restrictions are
                            placed to prevent users from directly changing the
                            list of userIds, id of the chat, and timestamp of
                            the chat (when it was created).
                        </td>
                    </tr>
                    <tr>
                        <td>/PATCH</td>
                        <td>/:id/chats/:chatId/messages/:messageId</td>
                        <td>
                            Modifies an existing message of an existing user
                            from an existing chat only if the message is being
                            modified. Restrictions are placed to prevent users
                            from changing the id, timestamps, senderId, and
                            chatId.
                        </td>
                    </tr>
                    <tr>
                        <td>/DELETE</td>
                        <td>/users/:id</td>
                        <td>
                            Deletes the user's account. A temporary placeholder
                            is created in its place in case the user is in any
                            chat groups.
                        </td>
                    </tr>
                    <tr>
                        <td>/DELETE</td>
                        <td>/users/:id/chats/:chatId</td>
                        <td>
                            Initiates leaving the chat or deleting it if the
                            last user leaves the chat. Also deletes any messages
                            related to the chat when the chat is deleted.
                        </td>
                    </tr>
                    <tr>
                        <td>/DELETE</td>
                        <td>/:id/chats/:chatId/messages/:messageId</td>
                        <td>
                            Deletes an existing message of an existing user from
                            an existing chat only if the message belongs to the
                            user and the user is in the chat.
                        </td>
                    </tr>
                </table>
                <h2>Sample Form for User Registration</h2>
                <div class="form-container">
                    <form id="signup-form" novalidate>
                        <h1>Sign Up</h1>
                        <input
                            type="text"
                            name="username"
                            id="username"
                            placeholder="Enter a username"
                            autocomplete="none"
                        />
                        <input
                            type="email"
                            name="email"
                            id="email"
                            placeholder="Enter an email"
                            autocomplete="none"
                        />
                        <input
                            type="password"
                            name="password"
                            id="password"
                            placeholder="Enter a password"
                            autocomplete="none"
                        />
                        <input
                            type="password"
                            name="confirmPassword"
                            id="confirmPassword"
                            placeholder="Confirm password"
                            autocomplete="none"
                        />
                        <button type="submit" id="signup-btn" formnovalidate>
                            Sign Up
                        </button>
                    </form>
                </div>
            </section>
            <section id="chats-endpoint">
                <h1>Chats Endpoint</h1>
            </section>
            <section id="messages-endpoint">
                <h1>Messages Endpoint</h1>
            </section>
        </main>
    </body>
</html>
