<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Chat API Docs</title>
    <link rel="stylesheet" href="/styles/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script type="module" src="/scripts/script.js"></script>
</head>
<body class="dark-mode">
    <header>
        <nav>
            <h1>Web Chat API</h1>
            <a href="#" class="nav-element">Users Endpoint</a>
            <a href="#" class="nav-element">Chats Endpoint</a>
            <a href="#" class="nav-element">Messages Endpoint</a>
        </nav>
    </header>
    <main class="container flex-wrap">
        <section id="about-api">
            <h1>About the API</h1>
            <p>This WebChatAPI was created to handle text chat between two or more users and uses Node.js, Express, and EJS (to render a view). At the moment, it is not connected to any databases and uses static data. Any information created, updated, or deleted will only take effect during the current instance that the API is being ran (data does not persist). Below is a code snippet with comments of all the classes and static data.</p>

        </section>
        <section id="users-endpoint">
            <h1>Users Endpoint</h1>
            <p>This section contains information on the /users endpoint.</p>
            <h2>Table of Endpoints</h2>
            <table id="users">
                <tr>
                    <th><h3>Method</h3></th>
                    <th><h3>Endpoint</h3></th>
                    <th><h3>Description</h3></th>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users</td>
                    <td>Retrieves all users.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users?userId={id}</td>
                    <td>Retrieves a particular user with userId of id using a query.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users/:id</td>
                    <td>Retrieves a particular user with userId of id.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users/:id/chats</td>
                    <td>Retrieves all chats that the user with userId of id is in.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users/:id/chats/:chatId</td>
                    <td>Retrieves information on the specific chat if the user is in it.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users/:id/chats/:chatId/messages</td>
                    <td>Retrieves all messages of a particular chat that the user is in.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/:id/chats/:chatId/messages?limit={num}</td>
                    <td>Retrieves the {num} most recent messages of the chat.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/:id/chats/:chatId/messages?userId={id}</td>
                    <td>Retrieves all messages belonging to the userId of {id} if the user requesting the messages and the requested user are both in that chat.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/:id/chats/:chatId/messages/:messageId</td>
                    <td>Retrieves a particular message from a particular chat if the user requesting the message is in the chat.</td>
                </tr>
                <tr>
                    <td>/GET</td>
                    <td>/users/:id/messages</td>
                    <td>Retrieves all messages that the user with userId of id sent.</td>
                </tr>
                <tr>
                    <td>/POST</td>
                    <td>/users</td>
                    <td>Creates a new user and adds it to the static array of Users if the username and email are unique. There are other constraints for the username, email, and password field that are expected to be handled in the front-end. The form HERE is an example that properly handles this behavior.</td>
                </tr>
                <tr>
                    <td>/PATCH</td>
                    <td>/users/:id</td>
                    <td>Modifies an existing user's password and/or email. Restrictions are placed to prevent users from changing their username or id.</td>
                </tr>
                <tr>
                    <td>/PATCH</td>
                    <td>/:id/chats/:chatId/messages/:messageId</td>
                    <td>Modifies an existing message of an existing user from an existing chat only if the message is being modified. Restrictions are placed to prevent users from changing the id, timestamps, senderId, and chatId.</td>
                </tr>
                <tr>
                    <td>/DELETE</td>
                    <td>/users/:id</td>
                    <td>Deletes the user's account. A temporary placeholder is created in its place in case the user is in any chat groups.</td>
                </tr>
                <tr>
                    <td>/DELETE</td>
                    <td>/:id/chats/:chatId/messages/:messageId</td>
                    <td>Deletes an existing message of an existing user from an existing chat only if the message belongs to the user and the user is in the chat.</td>
                </tr>
            </table>
            <div class="form-container">
                <form id="signup-form" novalidate>
                    <h1>Sign Up</h1>
                    <input type="text" name="username" id="username" placeholder="Enter a username" autocomplete="none">
                    <input type="email" name="email" id="email" placeholder="Enter an email" autocomplete="none">
                    <input type="password" name="password" id="password" placeholder="Enter a password" autocomplete="none">
                    <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Confirm password" autocomplete="none">
                    <button type="submit" id="signup-btn" formnovalidate>Sign Up</button>
                </form>
            </div>
        </section>
        <section id="chats-endpoint">
            <h1>Chats Endpoint</h1>
        </section>
        <section id="messages-endpoint">
            <h1>Messages Endpoint</h1>
        </section>
    </main>
</body>
</html>